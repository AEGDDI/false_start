summarise(across(all_of(columns_to_check), ~sum(is.na(.))))
# Printing the result
print(missing_values)
# Create indicator columns for missing values in each variable
for(col in columns_to_check) {
df_hm[[paste0(col, "_missing")]] <- is.na(df_hm[[col]])
}
# Count the number of missing values in each row for the specified columns
df_hm$missing_count <- rowSums(df_hm[, paste0(columns_to_check, "_missing")], na.rm = TRUE)
# Filter rows with more than one missing value
observations_with_multiple_missing <- df_hm %>%
filter(missing_count > 1) %>%
select(all_of(columns_to_check), starts_with("missing"), missing_count)
if(nrow(observations_with_multiple_missing) > 0) {
print(observations_with_multiple_missing)
} else {
print("No observations with more than one missing value.")
}
# Note: You may want to clean up the temporary columns after this analysis
df_hm <- df_hm %>% select(-starts_with("missing"), -missing_count)
# Remove observations with missing values in any of the specified columns
# df_hm<- df_hm[complete.cases(df_hm[, columns_to_check]), ]
#clear memory
rm(list = ls())
library(xtable) # export tables to LaTex
library(readxl) # read xlsx files
library(writexl) # export xlsx files
library(dplyr)
library(ggplot2)
library(ggforce) # function geom_mark_circle to add circle to graphs
# Data preparation
# set working directory
# Automatically set the user
user <- Sys.getenv("USERNAME") # Use Sys.getenv("USER") for Linux/Mac
# Load dataset
df <- read_excel(paste0("C:/Users/", user, "/Documents/GitHub/false_start_2/data/out/df.xlsx"))
# Load dataset
df_finalists <- read_excel(paste0("C:/Users/", user, "/Documents/GitHub/false_start_2/data/out/df_finalists.xlsx"))
# Count the number of missing values in the 'reactiontime' column
missing_count <- sum(is.na(df$reactiontime_ms))
# Print the result
cat("Number of missing values in 'reactiontime':", missing_count, "\n")
# df for 100m
df_hm= df %>% filter(discipline == '100m')
# 100m men
df_hm_men = df %>% filter(discipline == '100m'& men == 1)
df_hm_men_finalists = df_finalists %>% filter(discipline == '100m'& men == 1)
# 100m women
df_hm_women = df %>% filter(discipline == '100m'& men == 0)
df_hm_women_finalists = df_finalists %>% filter(discipline == '100m'& men == 0)
# remove missing values for variables used in regression model
columns_to_check <- c("reactiontime_ms", "age_at_event", "finishingtime", "semi", "final", "rule", "wind", "country", "lane")
# Counting missing values for each column of interest
missing_values <- df_hm %>%
summarise(across(all_of(columns_to_check), ~sum(is.na(.))))
# Printing the result
print(missing_values)
# Create indicator columns for missing values in each variable
for(col in columns_to_check) {
df_hm[[paste0(col, "_missing")]] <- is.na(df_hm[[col]])
}
# Count the number of missing values in each row for the specified columns
df_hm$missing_count <- rowSums(df_hm[, paste0(columns_to_check, "_missing")], na.rm = TRUE)
# Filter rows with more than one missing value
observations_with_multiple_missing <- df_hm %>%
filter(missing_count > 1) %>%
select(all_of(columns_to_check), starts_with("missing"), missing_count)
if(nrow(observations_with_multiple_missing) > 0) {
print(observations_with_multiple_missing)
} else {
print("No observations with more than one missing value.")
}
# Note: You may want to clean up the temporary columns after this analysis
df_hm <- df_hm %>% select(-starts_with("missing"), -missing_count)
# Remove observations with missing values in any of the specified columns
# df_hm<- df_hm[complete.cases(df_hm[, columns_to_check]), ]
table1 <- df_hm %>%
group_by(rule, men) %>%
summarise(
Mean_ReactionTime = mean(reactiontime, na.rm = TRUE),
SD_ReactionTime = sd(reactiontime, na.rm = TRUE),
Num_FalseStarts = sum(falsestart == 1, na.rm = TRUE),
Num_Observations = n()
) %>%
ungroup()
# Print the summary
print(table1)
table1_tot <- data.frame(
Mean_ReactionTime = mean(df_hm$reactiontime, na.rm = TRUE),
SD_ReactionTime = sd(df_hm$reactiontime, na.rm = TRUE),
Num_FalseStarts = sum(df_hm$falsestart == 1, na.rm = TRUE),
Num_Observations = nrow(df_hm)
)
print(table1_tot)
## women
# Calculate the mean of the variable grouped by stage and rule for all women who attended all stages of the competition (from preliminary to final)
mean_df_women <- df2_hm_women_finalists %>%
group_by(stage, rule) %>%
summarise(mean_rt_women = mean(reactiontime, na.rm = TRUE))
#clear memory
rm(list = ls())
library(xtable) # export tables to LaTex
library(readxl) # read xlsx files
library(writexl) # export xlsx files
library(dplyr)
library(ggplot2)
library(ggforce) # function geom_mark_circle to add circle to graphs
# Data preparation
# set working directory
# Automatically set the user
user <- Sys.getenv("USERNAME") # Use Sys.getenv("USER") for Linux/Mac
# Load dataset
df <- read_excel(paste0("C:/Users/", user, "/Documents/GitHub/false_start_2/data/out/df.xlsx"))
# Load dataset
df_finalists <- read_excel(paste0("C:/Users/", user, "/Documents/GitHub/false_start_2/data/out/df_finalists.xlsx"))
# Count the number of missing values in the 'reactiontime' column
missing_count <- sum(is.na(df$reactiontime_ms))
# Print the result
cat("Number of missing values in 'reactiontime':", missing_count, "\n")
# df for 100m
df_hm= df %>% filter(discipline == '100m')
# 100m men
df_hm_men = df %>% filter(discipline == '100m'& men == 1)
df_hm_men_finalists = df_finalists %>% filter(discipline == '100m'& men == 1)
# 100m women
df_hm_women = df %>% filter(discipline == '100m'& men == 0)
df_hm_women_finalists = df_finalists %>% filter(discipline == '100m'& men == 0)
# remove missing values for variables used in regression model
columns_to_check <- c("reactiontime_ms", "age_at_event", "finishingtime", "semi", "final", "rule", "wind", "country", "lane")
# Counting missing values for each column of interest
missing_values <- df_hm %>%
summarise(across(all_of(columns_to_check), ~sum(is.na(.))))
# Printing the result
print(missing_values)
# Create indicator columns for missing values in each variable
for(col in columns_to_check) {
df_hm[[paste0(col, "_missing")]] <- is.na(df_hm[[col]])
}
# Count the number of missing values in each row for the specified columns
df_hm$missing_count <- rowSums(df_hm[, paste0(columns_to_check, "_missing")], na.rm = TRUE)
# Filter rows with more than one missing value
observations_with_multiple_missing <- df_hm %>%
filter(missing_count > 1) %>%
select(all_of(columns_to_check), starts_with("missing"), missing_count)
if(nrow(observations_with_multiple_missing) > 0) {
print(observations_with_multiple_missing)
} else {
print("No observations with more than one missing value.")
}
# Note: You may want to clean up the temporary columns after this analysis
df_hm <- df_hm %>% select(-starts_with("missing"), -missing_count)
# Remove observations with missing values in any of the specified columns
# df_hm<- df_hm[complete.cases(df_hm[, columns_to_check]), ]
table1 <- df_hm %>%
group_by(rule, men) %>%
summarise(
Mean_ReactionTime = mean(reactiontime, na.rm = TRUE),
SD_ReactionTime = sd(reactiontime, na.rm = TRUE),
Num_FalseStarts = sum(falsestart == 1, na.rm = TRUE),
Num_Observations = n()
) %>%
ungroup()
# Print the summary
print(table1)
table1_tot <- data.frame(
Mean_ReactionTime = mean(df_hm$reactiontime, na.rm = TRUE),
SD_ReactionTime = sd(df_hm$reactiontime, na.rm = TRUE),
Num_FalseStarts = sum(df_hm$falsestart == 1, na.rm = TRUE),
Num_Observations = nrow(df_hm)
)
print(table1_tot)
## women
# Calculate the mean of the variable grouped by stage and rule for all women who attended all stages of the competition (from preliminary to final)
mean_df_women <- df2_hm_women_finalists %>%
group_by(stage, rule) %>%
summarise(mean_rt_women = mean(reactiontime, na.rm = TRUE))
#clear memory
rm(list = ls())
library(xtable) # export tables to LaTex
library(readxl) # read xlsx files
library(writexl) # export xlsx files
library(dplyr)
library(ggplot2)
library(ggforce) # function geom_mark_circle to add circle to graphs
# Data preparation
# set working directory
# Automatically set the user
user <- Sys.getenv("USERNAME") # Use Sys.getenv("USER") for Linux/Mac
# Load dataset
df <- read_excel(paste0("C:/Users/", user, "/Documents/GitHub/false_start_2/data/out/df.xlsx"))
# Load dataset
df_finalists <- read_excel(paste0("C:/Users/", user, "/Documents/GitHub/false_start_2/data/out/df_finalists.xlsx"))
# Count the number of missing values in the 'reactiontime' column
missing_count <- sum(is.na(df$reactiontime_ms))
# Print the result
cat("Number of missing values in 'reactiontime':", missing_count, "\n")
# df for 100m
df_hm= df %>% filter(discipline == '100m')
# 100m men
df_hm_men = df %>% filter(discipline == '100m'& men == 1)
df_hm_men_finalists = df_finalists %>% filter(discipline == '100m'& men == 1)
# 100m women
df_hm_women = df %>% filter(discipline == '100m'& men == 0)
df_hm_women_finalists = df_finalists %>% filter(discipline == '100m'& men == 0)
# remove missing values for variables used in regression model
columns_to_check <- c("reactiontime_ms", "age_at_event", "finishingtime", "semi", "final", "rule", "wind", "country", "lane")
# Counting missing values for each column of interest
missing_values <- df_hm %>%
summarise(across(all_of(columns_to_check), ~sum(is.na(.))))
# Printing the result
print(missing_values)
# Create indicator columns for missing values in each variable
for(col in columns_to_check) {
df_hm[[paste0(col, "_missing")]] <- is.na(df_hm[[col]])
}
# Count the number of missing values in each row for the specified columns
df_hm$missing_count <- rowSums(df_hm[, paste0(columns_to_check, "_missing")], na.rm = TRUE)
# Filter rows with more than one missing value
observations_with_multiple_missing <- df_hm %>%
filter(missing_count > 1) %>%
select(all_of(columns_to_check), starts_with("missing"), missing_count)
if(nrow(observations_with_multiple_missing) > 0) {
print(observations_with_multiple_missing)
} else {
print("No observations with more than one missing value.")
}
# Note: You may want to clean up the temporary columns after this analysis
df_hm <- df_hm %>% select(-starts_with("missing"), -missing_count)
# Remove observations with missing values in any of the specified columns
# df_hm<- df_hm[complete.cases(df_hm[, columns_to_check]), ]
table1 <- df_hm %>%
group_by(rule, men) %>%
summarise(
Mean_ReactionTime = mean(reactiontime, na.rm = TRUE),
SD_ReactionTime = sd(reactiontime, na.rm = TRUE),
Num_FalseStarts = sum(falsestart == 1, na.rm = TRUE),
Num_Observations = n()
) %>%
ungroup()
# Print the summary
print(table1)
table1_tot <- data.frame(
Mean_ReactionTime = mean(df_hm$reactiontime, na.rm = TRUE),
SD_ReactionTime = sd(df_hm$reactiontime, na.rm = TRUE),
Num_FalseStarts = sum(df_hm$falsestart == 1, na.rm = TRUE),
Num_Observations = nrow(df_hm)
)
print(table1_tot)
## women
# Calculate the mean of the variable grouped by stage and rule for all women who attended all stages of the competition (from preliminary to final)
mean_df_women <- df_hm_women_finalists %>%
group_by(stage, rule) %>%
summarise(mean_rt_women = mean(reactiontime, na.rm = TRUE))
# Create a combined factor for stage and rule
# mean_df_women <- mean_df_women %>%
#   mutate(stage_rule = interaction(stage, rule, drop = TRUE))
# Sort the data frame based on the combined factor
mean_df_women <- mean_df_women %>%
arrange(stage)
# Plot the mean values as stacked line graphs with white background
ggplot(mean_df_women, aes(x = stage, y = mean_rt_women, color = rule, group = rule)) +
geom_line(position = "identity", size = 1) +
geom_point(size = 3, shape = 21, fill = "white") +
geom_text(aes(label = round(mean_rt_women, 3)), hjust = -0.2, vjust = 0, size = 3, color = "black") +
labs(x = "Stage and Rule", y = "Mean Reaction Time") +
scale_color_discrete(name = "Rule") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black"),
legend.text = element_text(color = "black")
) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom",
legend.box = "horizontal") +
scale_x_discrete(labels = function(x) gsub("_", " ", x))
# Save the plot to file with white background
ggsave(filename = paste0(plots_out, "mean_rt_women.png"), plot = last_plot(), bg = "white")
View(mean_df_women)
# Plot the mean values as stacked line graphs with white background for men
ggplot(mean_df_men, aes(x = stage, y = mean_rt_men, color = rule, group = rule)) +
geom_line(position = "identity", size = 1) +
geom_point(size = 3, shape = 21, fill = "white") +
geom_text(aes(label = round(mean_rt_men, 3)), hjust = -0.2, vjust = 0, size = 3, color = "black") +
labs(x = "Stage and Rule", y = "Mean Reaction Time") +
scale_color_discrete(name = "Rule") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black"),
legend.text = element_text(color = "black")
) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom",
legend.box = "horizontal") +
scale_x_discrete(labels = function(x) gsub("_", " ", x))
#clear memory
rm(list = ls())
library(xtable) # export tables to LaTex
library(readxl) # read xlsx files
library(writexl) # export xlsx files
library(dplyr)
library(ggplot2)
library(ggforce) # function geom_mark_circle to add circle to graphs
# Data preparation
# set working directory
# Automatically set the user
user <- Sys.getenv("USERNAME") # Use Sys.getenv("USER") for Linux/Mac
# Load dataset
df <- read_excel(paste0("C:/Users/", user, "/Documents/GitHub/false_start_2/data/out/df.xlsx"))
# Load dataset
df_finalists <- read_excel(paste0("C:/Users/", user, "/Documents/GitHub/false_start_2/data/out/df_finalists.xlsx"))
# Count the number of missing values in the 'reactiontime' column
missing_count <- sum(is.na(df$reactiontime_ms))
# Print the result
cat("Number of missing values in 'reactiontime':", missing_count, "\n")
# df for 100m
df_hm= df %>% filter(discipline == '100m')
# 100m men
df_hm_men = df %>% filter(discipline == '100m'& men == 1)
df_hm_men_finalists = df_finalists %>% filter(discipline == '100m'& men == 1)
# 100m women
df_hm_women = df %>% filter(discipline == '100m'& men == 0)
df_hm_women_finalists = df_finalists %>% filter(discipline == '100m'& men == 0)
# remove missing values for variables used in regression model
columns_to_check <- c("reactiontime_ms", "age_at_event", "finishingtime", "semi", "final", "rule", "wind", "country", "lane")
# Counting missing values for each column of interest
missing_values <- df_hm %>%
summarise(across(all_of(columns_to_check), ~sum(is.na(.))))
# Printing the result
print(missing_values)
# Create indicator columns for missing values in each variable
for(col in columns_to_check) {
df_hm[[paste0(col, "_missing")]] <- is.na(df_hm[[col]])
}
# Count the number of missing values in each row for the specified columns
df_hm$missing_count <- rowSums(df_hm[, paste0(columns_to_check, "_missing")], na.rm = TRUE)
# Filter rows with more than one missing value
observations_with_multiple_missing <- df_hm %>%
filter(missing_count > 1) %>%
select(all_of(columns_to_check), starts_with("missing"), missing_count)
if(nrow(observations_with_multiple_missing) > 0) {
print(observations_with_multiple_missing)
} else {
print("No observations with more than one missing value.")
}
# Note: You may want to clean up the temporary columns after this analysis
df_hm <- df_hm %>% select(-starts_with("missing"), -missing_count)
# Remove observations with missing values in any of the specified columns
# df_hm<- df_hm[complete.cases(df_hm[, columns_to_check]), ]
table1 <- df_hm %>%
group_by(rule, men) %>%
summarise(
Mean_ReactionTime = mean(reactiontime, na.rm = TRUE),
SD_ReactionTime = sd(reactiontime, na.rm = TRUE),
Num_FalseStarts = sum(falsestart == 1, na.rm = TRUE),
Num_Observations = n()
) %>%
ungroup()
# Print the summary
print(table1)
table1_tot <- data.frame(
Mean_ReactionTime = mean(df_hm$reactiontime, na.rm = TRUE),
SD_ReactionTime = sd(df_hm$reactiontime, na.rm = TRUE),
Num_FalseStarts = sum(df_hm$falsestart == 1, na.rm = TRUE),
Num_Observations = nrow(df_hm)
)
print(table1_tot)
# mean reaction times by stage and rule
## men
# Calculate the mean of the variable grouped by stage and rule for all men who attended all stages of the competition (from preliminary to final)
mean_df_men <- df_hm_men_finalists %>%
group_by(stage, rule) %>%
summarise(mean_rt_men = mean(reactiontime, na.rm = TRUE))
# Create a combined factor for stage and rule
# mean_df_men <- mean_df_men %>%
#   mutate(stage_rule = interaction(stage, rule, drop = TRUE))
# Sort the data frame based on the combined factor
mean_df_men <- mean_df_men %>%
arrange(stage)
# Plot the mean values as stacked line graphs with white background for men
ggplot(mean_df_men, aes(x = stage, y = mean_rt_men, color = rule, group = rule)) +
geom_line(position = "identity", size = 1) +
geom_point(size = 3, shape = 21, fill = "white") +
geom_text(aes(label = round(mean_rt_men, 3)), hjust = -0.2, vjust = 0, size = 3, color = "black") +
labs(x = "Stage and Rule", y = "Mean Reaction Time") +
scale_color_discrete(name = "Rule") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black"),
legend.text = element_text(color = "black")
) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom",
legend.box = "horizontal") +
scale_x_discrete(labels = function(x) gsub("_", " ", x))
#clear memory
rm(list = ls())
library(xtable) # export tables to LaTex
library(readxl) # read xlsx files
library(writexl) # export xlsx files
library(dplyr)
library(ggplot2)
library(ggforce) # function geom_mark_circle to add circle to graphs
# Data preparation
# set working directory
# Automatically set the user
user <- Sys.getenv("USERNAME") # Use Sys.getenv("USER") for Linux/Mac
# Load dataset
df <- read_excel(paste0("C:/Users/", user, "/Documents/GitHub/false_start_2/data/out/df.xlsx"))
# Load dataset
df_finalists <- read_excel(paste0("C:/Users/", user, "/Documents/GitHub/false_start_2/data/out/df_finalists.xlsx"))
# Count the number of missing values in the 'reactiontime' column
missing_count <- sum(is.na(df$reactiontime_ms))
# Print the result
cat("Number of missing values in 'reactiontime':", missing_count, "\n")
# df for 100m
df_hm= df %>% filter(discipline == '100m')
# 100m men
df_hm_men = df %>% filter(discipline == '100m'& men == 1)
df_hm_men_finalists = df_finalists %>% filter(discipline == '100m'& men == 1)
# 100m women
df_hm_women = df %>% filter(discipline == '100m'& men == 0)
df_hm_women_finalists = df_finalists %>% filter(discipline == '100m'& men == 0)
# remove missing values for variables used in regression model
columns_to_check <- c("reactiontime_ms", "age_at_event", "finishingtime", "semi", "final", "rule", "wind", "country", "lane")
# Counting missing values for each column of interest
missing_values <- df_hm %>%
summarise(across(all_of(columns_to_check), ~sum(is.na(.))))
# Printing the result
print(missing_values)
# Create indicator columns for missing values in each variable
for(col in columns_to_check) {
df_hm[[paste0(col, "_missing")]] <- is.na(df_hm[[col]])
}
# Count the number of missing values in each row for the specified columns
df_hm$missing_count <- rowSums(df_hm[, paste0(columns_to_check, "_missing")], na.rm = TRUE)
# Filter rows with more than one missing value
observations_with_multiple_missing <- df_hm %>%
filter(missing_count > 1) %>%
select(all_of(columns_to_check), starts_with("missing"), missing_count)
if(nrow(observations_with_multiple_missing) > 0) {
print(observations_with_multiple_missing)
} else {
print("No observations with more than one missing value.")
}
# Note: You may want to clean up the temporary columns after this analysis
df_hm <- df_hm %>% select(-starts_with("missing"), -missing_count)
# Remove observations with missing values in any of the specified columns
# df_hm<- df_hm[complete.cases(df_hm[, columns_to_check]), ]
table1 <- df_hm %>%
group_by(rule, men) %>%
summarise(
Mean_ReactionTime = mean(reactiontime, na.rm = TRUE),
SD_ReactionTime = sd(reactiontime, na.rm = TRUE),
Num_FalseStarts = sum(falsestart == 1, na.rm = TRUE),
Num_Observations = n()
) %>%
ungroup()
# Print the summary
print(table1)
table1_tot <- data.frame(
Mean_ReactionTime = mean(df_hm$reactiontime, na.rm = TRUE),
SD_ReactionTime = sd(df_hm$reactiontime, na.rm = TRUE),
Num_FalseStarts = sum(df_hm$falsestart == 1, na.rm = TRUE),
Num_Observations = nrow(df_hm)
)
print(table1_tot)
# mean reaction times by stage and rule
## men
# Calculate the mean of the variable grouped by stage and rule for all men who attended all stages of the competition (from preliminary to final)
mean_df_men <- df_hm_men_finalists %>%
group_by(stage, rule) %>%
summarise(mean_rt_men = mean(reactiontime, na.rm = TRUE))
# Create a combined factor for stage and rule
# mean_df_men <- mean_df_men %>%
#   mutate(stage_rule = interaction(stage, rule, drop = TRUE))
# Sort the data frame based on the combined factor
mean_df_men <- mean_df_men %>%
arrange(stage)
# Reorder the 'stage' factor
mean_df_men$stage <- factor(mean_df_men$stage, levels = c("preliminary", "heat", "semi", "final"))
# Plot the mean values as stacked line graphs with white background for men
ggplot(mean_df_men, aes(x = stage, y = mean_rt_men, color = rule, group = rule)) +
geom_line(position = "identity", size = 1) +
geom_point(size = 3, shape = 21, fill = "white") +
geom_text(aes(label = round(mean_rt_men, 3)), hjust = -0.2, vjust = 0, size = 3, color = "black") +
labs(x = "Stage and Rule", y = "Mean Reaction Time") +
scale_color_discrete(name = "Rule") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black"),
legend.text = element_text(color = "black")
) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom",
legend.box = "horizontal") +
scale_x_discrete(labels = function(x) gsub("_", " ", x))
